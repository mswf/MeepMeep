
require "lua/application/ui/mainmenu/mainmenu_ui"
require "lua/application/ui/test_ui"
require "lua/application/ui/option_ui"

MainMenuState = class(MainMenuState, GameState, function(self, gameStateManager)
	self._base.init(self, gameStateManager)

end)


createPrivateEnum(MainMenuState, "Events",
	"OpenOptions",
	"CloseOptions"
)

function MainMenuState:update(dt)
	-- Log.steb("updating the MainMenuState")

end

function MainMenuState:__onReload()
	Log.steb("MainMenuState reloaded")

	-- self.window.title = "Anything"

	-- Log.steb("changed broadcaster reload")
end

function MainMenuState:exit(transitionType, args)
	if (args.instruction == "NEWGAME") then
		GlobalData:createGameNew()
	elseif (args.instruction == "LOADGAME") then
		GlobalData:loadGame(args.saveHandle)
	else
		GlobalData:createGameNew()
	end
end

function MainMenuState:enter(transitionType, args)
	self._mainMenuUI = MainMenuUI(self.UIManager)

	self._optionUI = OptionUI(self.UIManager, {visible = false})

	self._testUI2 = TestUI(self.UIManager, {title = "Test 2"})
	self._testUI = TestUI(self.UIManager, {title = "Test 1"})



	Log.bobn("plsdfff")
	Log.bobn(Engine.system.contentPath)

	--local model = Engine.loadModel("objects/weikie/plane.obj");
	--local rabbit = Entity()
	--local renderer = MeshRenderer()
	--renderer:setModel(model)

	--abbit:addComponent(renderer)

	--abbit:setPosition(0,0,0)

<<<<<<< Updated upstream
	rabbit.update = function(self, dt)
		-- Log.steb(dt)
		if (Input.key(KeyCode.w)) then
			self:addZ(1*dt)
		end

		if (Input.key(KeyCode.s)) then
			self:addZ(-1*dt)
		end

		if (Input.key(KeyCode.a)) then
			self:addX(1*dt)
		end

		if (Input.key(KeyCode.d)) then
			self:addX(-1*dt)
		end
		-- self:yaw(1)
	end
=======
	--abbit.update = function(self, delta)
	--	self:yaw(1)
	--end
>>>>>>> Stashed changes

	--odel = Engine.loadModel("objects/icy_snowman.obj");
	--ocal snowman = Entity()
	--enderer = MeshRenderer()
	--enderer:setModel(model)

	--nowman:addComponent(renderer)

	--nowman:setPosition(-1,-1,-1)

<<<<<<< Updated upstream
	snowman.update = function(self, dt)
		self:roll(1)
	end
=======
	--nowman.update = function(self, delta)
	--	self:roll(1)
	--end
>>>>>>> Stashed changes

	--rabbit:addChild(snowman)
end
